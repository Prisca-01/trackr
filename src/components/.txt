import { useState, useEffect } from "react";
import TodoForm from "./TodoForm";
import EditTodoForm from "./EditTodoForm";
import { v4 as uuidv4 } from "uuid";
import Todo from "./Todo";
import { Link } from "react-router-dom";
import TaskCalendar from "./Cal";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faPlus
} from "@fortawesome/free-solid-svg-icons";
// import { format, addDays, startOfWeek } from "date-fns";

uuidv4();

const TodoWrapper = () => {
  const [todos, setTodos] = useState([]);
//   const { tasks } = useContext(TaskContext);

//   const [activities, setActivities] = useState([]);
  const [selectedDate, setSelectedDate] = useState(
    new Date().toISOString().split("T")[0]
  );

//   const handleAddActivity = (activity) => {
//     setActivities([...activities, activity]);
//   };
  // Load todos from localStorage on component mount
  useEffect(() => {
    const storedTodos = JSON.parse(localStorage.getItem("todos"));
    if (storedTodos) {
      setTodos(storedTodos);
    }
  }, []);

  // Save todos to localStorage whenever todos change
  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todos));
  }, [todos]);

  const addTodo = (todo, date) => {
    setTodos((prevTodos) => {
      const newTodos = { ...prevTodos };
      if (!newTodos[date]) {
        newTodos[date] = [];
      }
      newTodos[date].push({
        id: uuidv4(),
        task: todo,
        completed: false,
        isEditing: false,
      });
      return newTodos;
    });
  };

  const toggleComplete = (id, date) => {
    setTodos((prevTodos) => {
      const newTodos = { ...prevTodos };
      newTodos[date] = newTodos[date].map((todo) =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      );
      return newTodos;
    });
  };

  const deleteTodo = (id, date) => {
    setTodos((prevTodos) => {
      const newTodos = { ...prevTodos };
      newTodos[date] = newTodos[date].filter((todo) => todo.id !== id);
      return newTodos;
    });
  };

  const editTodo = (id, date) => {
    setTodos((prevTodos) => {
      const newTodos = { ...prevTodos };
      newTodos[date] = newTodos[date].map((todo) =>
        todo.id === id ? { ...todo, isEditing: !todo.isEditing } : todo
      );
      return newTodos;
    });
  };

  const editTask = (task, id, date) => {
    setTodos((prevTodos) => {
      const newTodos = { ...prevTodos };
      newTodos[date] = newTodos[date].map((todo) =>
        todo.id === id ? { ...todo, task, isEditing: !todo.isEditing } : todo
      );
      return newTodos;
    });
  };

  
  //   const calculateWeeklyProgress = () => {
  //     const startOfWeekDate = startOfWeek(new Date(selectedDate), {
  //       weekStartsOn: 0,
  //     });
  //     const endOfWeekDate = addDays(startOfWeekDate, 6);
  //     let totalTasks = 0;
  //     let completedTasks = 0;
  //     for (
  //       let date = startOfWeekDate;
  //       date <= endOfWeekDate;
  //       date = addDays(date, 1)
  //     ) {
  //       const dateString = format(date, "yyyy-MM-dd");
  //       const tasksForDay = todos[dateString] || [];
  //       totalTasks += tasksForDay.length;
  //       completedTasks += tasksForDay.filter((task) => task.completed).length;
  //     }
  //     return totalTasks === 0
  //       ? 0
  //       : Math.round((completedTasks / totalTasks) * 100);
  //   };

  return (
    <div className="TodoWrapper max-w-4xl mx-auto p-4 bg-white rounded-lg shadow-lg">
      <div className="mt-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-semibold">Activity</h2>
          <Link to="/add-activity"> <button
            type="submit"
            className="p-2 bg-blue-500 text-white rounded hover:bg-blue-700 transition-colors duration-300"
          >
            Add <FontAwesomeIcon icon={faPlus}/>
          </button></Link>
        </div>
      </div>
      <TaskCalendar setSelectedDate={setSelectedDate} />
      {/* <div className="task-list">
        <h2>Tasks</h2>
        {tasks.length > 0 ? (
          tasks.map((task) => (
            <div key={task.id} className="task">
              <h3>{task.name}</h3>
              <button>View Details</button>
            </div>
          ))
        ) : (
          <p>No tasks available.</p>
        )}
      </div> */}
      {/* <AddActivity onAddActivity={handleAddActivity} /> */}
      {/* <TaskList  /> */}
      <h1 className="text-2xl font-bold text-center mt-5 mb-4">
        Get Things Done!
      </h1>
      <TodoForm addTodo={addTodo} selectedDate={selectedDate} />

      {/* Daily Progress */}
      {/* <div className="mt-6">
        <h2 className="text-lg font-semibold mb-4">Daily Progress</h2>
        <div className="w-full bg-gray-200 rounded-full h-4">
          <div
            className="bg-blue-500 h-4 rounded-full"
            style={{ width: `${calculateDailyProgress()}%` }}
          ></div>
        </div>
        <p className="text-center mt-2">
          {calculateDailyProgress()}% completed
        </p>
      </div> */}

      {/* Weekly Progress */}
      {/* <div className="mt-6">
        <h2 className="text-lg font-semibold mb-4">Weekly Progress</h2>
        <div className="w-full bg-gray-200 rounded-full h-4">
          <div
            className="bg-blue-500 h-4 rounded-full"
            style={{ width: `${calculateWeeklyProgress()}%` }}
          ></div>
        </div>
        <p className="text-center mt-2">
          {calculateWeeklyProgress()}% completed
        </p>
      </div> */}

      {/* Render Todos for Selected Date */}
      {todos[selectedDate]?.map((todo, index) =>
        todo.isEditing ? (
          <EditTodoForm
            editTodo={(task) => editTask(task, todo.id, selectedDate)}
            task={todo}
            key={index}
          />
        ) : (
          <Todo
            key={index}
            task={todo}
            toggleComplete={() => toggleComplete(todo.id, selectedDate)}
            deleteTodo={() => deleteTodo(todo.id, selectedDate)}
            editTodo={() => editTodo(todo.id, selectedDate)}
          />
        )
      )}
    </div>
  );
};

export default TodoWrapper;
